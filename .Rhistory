knitr::opts_chunk$set(echo = TRUE, fig.width=6, fig.height=4)
library(dplyr)
library(ggplot2)
df <- read.csv('ps4_data.csv', fileEncoding = "UTF-8-BOM")
knitr::kable(df, "html", align = "c") %>%
kableExtra::kable_styling("striped", full_width = F, position = "left")
#---improved munge script for covid data
suppressWarnings({
suppressMessages({
library(data.table)
library(RSQLite)
library(DBI)
library(dplyr)
library(dbplyr)
library(mixdist)
library(extraDistr)
library(jsonlite)
library(geojsonio)
library(sp)
})
})
setwd('~/working/cov_api/')
#functions used
rt.func.v2<-function(dat,mean.Weibull=4.8,sd.Weibull=2.3){
r.vals<-numeric(length = (length(dat) - 2))
#get the Weibull parameters from mixdist's weibullpar function
mGT.params<-weibullpar(mean.Weibull, sd.Weibull, loc = 0)
alpha<-mGT.params[2] # called shape in weibullpar, alpha in a discrete Weilbull
beta<-mGT.params[1] # called scale in weibullpar, beta in a discrete Weibull
#the extraDistr package uses an altrnative parameterization of the Weibull (q, beta) from
#Nakagawa and Osaki (1975) where q = exp(-alpha^-beta), so...
q<-exp(-as.numeric(alpha)^(-as.numeric(beta)))
#Discretize Weibull via the extraDistr package's ddweibull function
w<- ddweibull(0:1000, as.numeric(q), as.numeric(beta), log = FALSE)
growth<-diff(dat)
growth<-pmax(growth, 0) # eliminate any erroneous downward shifts in the cumulative counts
#Estimate R(t) from equation (33) of Nishiura and Chowell (2009)
for(k in 2:length(growth)){
r.vals[k-1]<-growth[k]/(sum(growth[1:k]*rev(w[1:k])))
}
#Output the results
return(c(NA, NA, r.vals))
}
covid_db <- dbConnect(RSQLite::SQLite(), 'data/covid_db.sqlite')
#---check if need to update
suppressWarnings({
suppressMessages({
x <- tbl(covid_db, 'counties') %>%
filter(date == max(date, na.rm = TRUE)) %>%
select(date) %>%
collect()
})
})
db_date <- as.Date(x[1][[1]][1])
main <- fread('https://usafactsstatic.blob.core.windows.net/public/data/covid-19/covid_confirmed_usafacts.csv', colClasses = 'character', showProgress = FALSE)
main <- main[countyFIPS != '0']
keep_cols <- grep('V',colnames(main), invert = TRUE)
main <- main[, keep_cols, with=FALSE]
facts_date <- as.Date(colnames(main)[length(colnames(main))], format = '%m/%d/%y')
#if newer date in usafacts than db
if(db_date != facts_date){
#---finish cleaning up the usafacts data
main[nchar(countyFIPS) == 4, 'countyFIPS'] <- paste0('0', main[nchar(countyFIPS) == 4, countyFIPS])
df <- melt.data.table(main, id.vars = 1:4, measure.vars = 5:ncol(main), variable.name = 'date', value.name = 'case_count')
df[, date := as.Date(as.character(date), format = '%m/%d/%y')][
, case_count := as.integer(gsub(',', '', case_count))
]
#add daily growth
df[, delta := lapply(.SD, function(d) d - shift(d)), by = countyFIPS, .SDcols = 'case_count']
#add percent increase
df[, per_delta := lapply(.SD, function(d) (d - shift(d))/shift(d)), by = countyFIPS, .SDcols = 'case_count']
df[is.nan(per_delta), 'per_delta'] <- NA
df[is.infinite(per_delta), 'per_delta'] <- NA
#add rt
df[, r_t := rt.func.v2(case_count), by = 'countyFIPS']
#brind in deaths
deaths <- fread('https://usafactsstatic.blob.core.windows.net/public/data/covid-19/covid_deaths_usafacts.csv',
colClasses = 'character', showProgress = FALSE)
#drop bad data
d <- deaths[duplicated(deaths) == FALSE]
d <- d[countyFIPS != '0']
keep_cols <- grep('V',colnames(d), invert = TRUE)
d <- d[, keep_cols, with=FALSE]
#fix fips codes with leading 0
d[nchar(countyFIPS) == 4, 'countyFIPS'] <- paste0('0', d[nchar(countyFIPS) == 4, countyFIPS])
d <- melt.data.table(d, id.vars = 1:4, measure.vars = 5:ncol(d), variable.name = 'date', value.name = 'deaths')
d[, date := as.Date(as.character(date), format = '%m/%d/%y')][
, deaths := as.integer(gsub(',', '', deaths))
]
d <- d[, c('countyFIPS', 'date', 'deaths')]
setkeyv(d, c('countyFIPS', 'date'))
setkeyv(df, c('countyFIPS', 'date'))
#merge deaths
df <- d[df]
#--add pops
pop <- fread('https://www2.census.gov/programs-surveys/popest/datasets/2010-2019/counties/totals/co-est2019-alldata.csv',
colClasses = 'character', showProgress = FALSE)
pop[, countyFIPS := paste0(STATE, COUNTY)]
pop <- pop[, c('countyFIPS', 'POPESTIMATE2019')]
pop[, pop := as.numeric(POPESTIMATE2019)]
pop <- pop[, c('countyFIPS', 'pop')]
setkey(pop, countyFIPS)
setkey(df, countyFIPS)
df <- pop[df]
#---per capita cases and deaths
#df[, cases_per_10k := (case_count / pop) * 10000]
#df[, deaths_per_10k := (deaths / pop) * 10000]
#---age pop
age_pop <- fread('https://www2.census.gov/programs-surveys/popest/datasets/2010-2019/counties/asrh/cc-est2019-alldata.csv',
colClasses = 'character', showProgress = FALSE)
age_pop <- age_pop[YEAR == '12']
age_pop[, countyFIPS := paste0(STATE, COUNTY)]
age_pop[, AGEGRP := as.numeric(AGEGRP)]
#probability of hospitalization
#source: https://www.thelancet.com/action/showPdf?pii=S1473-3099%2820%2930243-7
hosp_table <- data.table(age = c('0-9','10-19','20-29','30-39','40-49','50-59','60-69','70-79','80+'),
rate = c(0, .000408, .0104, .0343, .0425, .0816, .118, .166, .184))
#---assumptions
#time from symptoms to test result
t1 <- 2
#time from symptoms to hospitalization
#source: https://jamanetwork.com/journals/jama/fullarticle/2761044
t2 <- 7
#max time infectious
m_i <- 10
#under-reporting
under <- 10
final <- list()
u_id <- unique(df$countyFIPS)
pb <- txtProgressBar(max = length(u_id), style = 3)
for(j in 1:length(u_id)){
ages <- age_pop[countyFIPS == u_id[j]]
age_dist <- c(sum(as.numeric(ages[AGEGRP %in% c(1,2), TOT_POP])), sum(as.numeric(ages[AGEGRP %in% c(3,4), TOT_POP])), sum(as.numeric(ages[AGEGRP %in% c(5,6), TOT_POP])),
sum(as.numeric(ages[AGEGRP %in% c(7,8), TOT_POP])), sum(as.numeric(ages[AGEGRP %in% c(9,10), TOT_POP])), sum(as.numeric(ages[AGEGRP %in% c(11,12), TOT_POP])),
sum(as.numeric(ages[AGEGRP %in% c(13,14), TOT_POP])), sum(as.numeric(ages[AGEGRP %in% c(15,16), TOT_POP])), sum(as.numeric(ages[AGEGRP %in% c(17,18), TOT_POP])))
age_prop <- age_dist / sum(age_dist)
p_h <- mean(age_prop * hosp_table$rate)
sub <- df[countyFIPS == u_id[j]]
#dates <- (min(sub$date) + 12):max(sub$date)
dates <- min(sub$date):max(sub$date)
out <- list()
for(i in 1:length(dates)){
#get days where people might already be hospitalized
hosp <- sub[date >= dates[i] - (m_i - t1) & date <= dates[i] - (t2 - t1)]
num_early <- round(sum(hosp$delta) * (1-p_h))
#get days where people won't be hospitalized yet
tmp <- sub[date > dates[i] - (t2 - t1) & date <= dates[i]]
num_late <- sum(tmp$delta)
walking <- (num_early + num_late) * under
walking_per_cap <- walking / sub$pop[1]
out[[i]] <- walking_per_cap * 100
}
probs <- unlist(out)
probs[1:12] <- NA
sub[, infect_prob := probs]
final[[j]] <- sub
setTxtProgressBar(pb, j)
}
df <- rbindlist(final)
df <- df[order(date)]
#---moving averages
df <- df[order(countyFIPS, date)]
df <- df[, r_t_three := frollmean(r_t, n = 3), by = countyFIPS]
df <- df[, r_t_seven := frollmean(r_t, n = 7), by = countyFIPS]
final <- list()
u_id <- unique(df$countyFIPS)
pb <- txtProgressBar(max = length(u_id), style = 3)
for(j in 1:length(u_id)){
sub <- df[countyFIPS == u_id[j]]
sub <- sub[order(-date)]
out <- list()
for(i in 1:length(sub$case_count)){
half <- sub$case_count[i]/2
index <- which(sub$case_count < half)[1]
out[[i]] <- as.numeric(sub$date[index] - sub$date[i]) * -1
}
sub[, doubling := unlist(out)]
final[[j]] <- sub
setTxtProgressBar(pb, j)
}
df <- rbindlist(final)
df <- df[order(date)]
df[, date := as.character(date)]
dbWriteTable(covid_db, 'counties', df, overwrite = TRUE)
print(paste0('Successful update at: ', Sys.time()))
update_history <- read.csv('~/working/cov_api/update_history.csv', stringsAsFactors = FALSE)
update_history <- rbind(update_history, data.frame(date = as.character(Sys.time())))
write.csv(update_history, '~/working/cov_api/update_history.csv', row.names = FALSE)
source('~/working/bigmap_api/create_files.R')
}
#breakout groupeR
d <- data.frame(name = c('Foran','Eckland','Davis','Shiffler','Cox','Wetzel','Ondrejcek','Grubb','Doody','Norris','Bordes','Orr','Altrogge','Greenfield'),
team = c(rep(1,4), rep(2,4), rep(3,3), rep(4,3))
)
d$team <- d$team[sample(1:nrow(d), nrow(d))]
d <- d[order(d$team),]
d$driver <- 'No'
for(i in 1:length(unique(d$team))){
len <- nrow(d[d$team == unique(d$team)[i],])
d$driver[d$team == unique(d$team)[i]][sample(1:len, 1)] <- 'Yes'
}
d
#---improved munge script for covid data
suppressWarnings({
suppressMessages({
library(data.table)
library(RSQLite)
library(DBI)
library(dplyr)
library(dbplyr)
library(mixdist)
library(extraDistr)
library(jsonlite)
library(geojsonio)
library(sp)
})
})
setwd('~/working/cov_api/')
#functions used
rt.func.v2<-function(dat,mean.Weibull=4.8,sd.Weibull=2.3){
r.vals<-numeric(length = (length(dat) - 2))
#get the Weibull parameters from mixdist's weibullpar function
mGT.params<-weibullpar(mean.Weibull, sd.Weibull, loc = 0)
alpha<-mGT.params[2] # called shape in weibullpar, alpha in a discrete Weilbull
beta<-mGT.params[1] # called scale in weibullpar, beta in a discrete Weibull
#the extraDistr package uses an altrnative parameterization of the Weibull (q, beta) from
#Nakagawa and Osaki (1975) where q = exp(-alpha^-beta), so...
q<-exp(-as.numeric(alpha)^(-as.numeric(beta)))
#Discretize Weibull via the extraDistr package's ddweibull function
w<- ddweibull(0:1000, as.numeric(q), as.numeric(beta), log = FALSE)
growth<-diff(dat)
growth<-pmax(growth, 0) # eliminate any erroneous downward shifts in the cumulative counts
#Estimate R(t) from equation (33) of Nishiura and Chowell (2009)
for(k in 2:length(growth)){
r.vals[k-1]<-growth[k]/(sum(growth[1:k]*rev(w[1:k])))
}
#Output the results
return(c(NA, NA, r.vals))
}
covid_db <- dbConnect(RSQLite::SQLite(), 'data/covid_db.sqlite')
#---check if need to update
suppressWarnings({
suppressMessages({
x <- tbl(covid_db, 'counties') %>%
filter(date == max(date, na.rm = TRUE)) %>%
select(date) %>%
collect()
})
})
db_date <- as.Date(x[1][[1]][1])
main <- fread('https://usafactsstatic.blob.core.windows.net/public/data/covid-19/covid_confirmed_usafacts.csv', colClasses = 'character', showProgress = FALSE)
main <- main[countyFIPS != '0']
keep_cols <- grep('V',colnames(main), invert = TRUE)
main <- main[, keep_cols, with=FALSE]
facts_date <- as.Date(colnames(main)[length(colnames(main))], format = '%m/%d/%y')
source('~/working/bigmap_api/create_files.R')
19+15+18+17+16
18+12+17+16-15
18+12+17+16+15
17+10+16+15+15
14+14+16+10+17
19+17+20+17+20
