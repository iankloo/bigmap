dt$winner_name[i] <- dt$name_2.first[which(dt$winner[i] == dt$name_2.id)][1]
}
}
dt$loser_name <- NA
for(i in 1:nrow(dt)){
if(dt$winner_name[i] == dt$name_1.first[i]){
dt$loser_name[i] <- dt$name_2.first[i]
} else{
dt$loser_name[i] <- dt$name_1.first[i]
}
}
dt
View(dt)
#---virtue comments
ft <- exp_ft
ft <- ft[experiment_name_id == exp_id]
ft$rater_name <- NA
for(i in 1:nrow(ft)){
ft$rater_name[i] <- p$first[p$id == ft$rater_name_id[i]]
}
ft$subject_name <- NA
for(i in 1:nrow(ft)){
ft$subject_name[i] <- p$first[p$id == ft$subject_name_id[i]]
}
ft
#---surveys
st <- exp_st
res <- exp_dt
st <- st[uuid %in% res$uuid]
st$exp <- NA
st$name <- NA
for(i in 1:nrow(st)){
st$exp[i] <- res$experiment_name[res$uuid == st$uuid[i]][1]
st$name[i] <- res$rater.first[res$uuid == st$uuid[i]][1]
}
st
View(st)
#---load cadets
library(data.table)
source('~/Documents/projects/Elo/interact_with_api.R')
df <- fread('~/Downloads/cft_roster_0722.csv')
#---load cadets
library(data.table)
source('~/Documents/projects/Elo/interact_with_api.R')
df <- fread('~/Downloads/cft_roster_0722.csv')
df
#make sure everyone is in the database
p <- get_people()
sub <- df[1]
sub
parse_name <- function(n){
num_space <- sum(unlist(strsplit(n, '')) == ' ')
if(num_space == 1){
last <- gsub('(.+) .+', '\\1', n)
first <- gsub('.+ (.+)', '\\1', n)
middle <- ''
} else if(num_space == 2){
last <- gsub('(.+) .+ .+', '\\1', n)
first <- gsub('.+ (.+) .+', '\\1', n)
middle <- gsub('.+ .+ (.+)', '\\1', n)
} else if(num_space == 3){
last <- gsub('(.+ .+) .+ .+', '\\1', n)
first <- gsub('.+ .+ (.+) .+', '\\1', n)
middle <- gsub('.+ .+ .+ (.+)', '\\1', n)
} else if(num_space == 4){
last <- gsub('(.+ .+ .+) .+ .+', '\\1', n)
first <- gsub('.+ .+ .+ (.+) .+', '\\1', n)
middle <- gsub('.+ .+ .+ .+ (.+)', '\\1', n)
} else{
last <- first <- middle <- NA
}
return(data.table(first, middle, last))
}
out <- lapply(df$NAME, parse_name)
final <- rbindlist(out)
df <- cbind(df, final)
df
0 <- 1
i <- 1
p[first == df[i, first] & middle == df[i, middle] & last == df[i, last] & email == df[i, email]]
#make sure everyone is in the database
p <- data.table(get_people())
p[first == df[i, first] & middle == df[i, middle] & last == df[i, last] & email == df[i, email]]
df[i, first]
p[first == df[i, first] & middle == df[i, middle] & last == df[i, last] & email == df[i, email]]
df <- df[, c('first','middle','last','EMAIL')]
df$rank <- 'CDT'
colnames(df)[4] <- 'email'
df <- fread('~/Downloads/cft_roster_0722.csv')
parse_name <- function(n){
num_space <- sum(unlist(strsplit(n, '')) == ' ')
if(num_space == 1){
last <- gsub('(.+) .+', '\\1', n)
first <- gsub('.+ (.+)', '\\1', n)
middle <- ''
} else if(num_space == 2){
last <- gsub('(.+) .+ .+', '\\1', n)
first <- gsub('.+ (.+) .+', '\\1', n)
middle <- gsub('.+ .+ (.+)', '\\1', n)
} else if(num_space == 3){
last <- gsub('(.+ .+) .+ .+', '\\1', n)
first <- gsub('.+ .+ (.+) .+', '\\1', n)
middle <- gsub('.+ .+ .+ (.+)', '\\1', n)
} else if(num_space == 4){
last <- gsub('(.+ .+ .+) .+ .+', '\\1', n)
first <- gsub('.+ .+ .+ (.+) .+', '\\1', n)
middle <- gsub('.+ .+ .+ .+ (.+)', '\\1', n)
} else{
last <- first <- middle <- NA
}
return(data.table(first, middle, last))
}
out <- lapply(df$NAME, parse_name)
final <- rbindlist(out)
df <- cbind(df, final)
df <- df[, c('first','middle','last','EMAIL')]
df$rank <- 'CDT'
colnames(df)[4] <- 'email'
df <- fread('~/Downloads/cft_roster_0722.csv')
parse_name <- function(n){
num_space <- sum(unlist(strsplit(n, '')) == ' ')
if(num_space == 1){
last <- gsub('(.+) .+', '\\1', n)
first <- gsub('.+ (.+)', '\\1', n)
middle <- ''
} else if(num_space == 2){
last <- gsub('(.+) .+ .+', '\\1', n)
first <- gsub('.+ (.+) .+', '\\1', n)
middle <- gsub('.+ .+ (.+)', '\\1', n)
} else if(num_space == 3){
last <- gsub('(.+ .+) .+ .+', '\\1', n)
first <- gsub('.+ .+ (.+) .+', '\\1', n)
middle <- gsub('.+ .+ .+ (.+)', '\\1', n)
} else if(num_space == 4){
last <- gsub('(.+ .+ .+) .+ .+', '\\1', n)
first <- gsub('.+ .+ .+ (.+) .+', '\\1', n)
middle <- gsub('.+ .+ .+ .+ (.+)', '\\1', n)
} else{
last <- first <- middle <- NA
}
return(data.table(first, middle, last))
}
out <- lapply(df$NAME, parse_name)
final <- rbindlist(out)
df <- cbind(df, final)
df <- df[, c('first','middle','last','Email')]
df$rank <- 'CDT'
colnames(df)[4] <- 'email'
#make sure everyone is in the database
p <- data.table(get_people())
p[first == df[i, first] & middle == df[i, middle] & last == df[i, last] & email == df[i, email]]
i <- 1
p[first == df[i, first] & middle == df[i, middle] & last == df[i, last] & email == df[i, email]]
for(i in 1:nrow(df)){
if(nrow(p[first == df[i, first] & middle == df[i, middle] & last == df[i, last] & email == df[i, email]]) == 0){
print(i)
}
}
i <- 1
nrow(p[first == df[i, first] & middle == df[i, middle] & last == df[i, last] & email == df[i, email]]) == 0
View(p)
p_df <- df[i, -c('db_id', 'squadID')]
p_df <- df[i]
p_df
df <- fread('~/Downloads/cft_roster_0722.csv')
parse_name <- function(n){
num_space <- sum(unlist(strsplit(n, '')) == ' ')
if(num_space == 1){
last <- gsub('(.+) .+', '\\1', n)
first <- gsub('.+ (.+)', '\\1', n)
middle <- ''
} else if(num_space == 2){
last <- gsub('(.+) .+ .+', '\\1', n)
first <- gsub('.+ (.+) .+', '\\1', n)
middle <- gsub('.+ .+ (.+)', '\\1', n)
} else if(num_space == 3){
last <- gsub('(.+ .+) .+ .+', '\\1', n)
first <- gsub('.+ .+ (.+) .+', '\\1', n)
middle <- gsub('.+ .+ .+ (.+)', '\\1', n)
} else if(num_space == 4){
last <- gsub('(.+ .+ .+) .+ .+', '\\1', n)
first <- gsub('.+ .+ .+ (.+) .+', '\\1', n)
middle <- gsub('.+ .+ .+ .+ (.+)', '\\1', n)
} else{
last <- first <- middle <- NA
}
return(data.table(first, middle, last))
}
out <- lapply(df$NAME, parse_name)
final <- rbindlist(out)
View(final)
df <- fread('~/Downloads/cft_roster_0722.csv')
parse_name <- function(n){
num_space <- sum(unlist(strsplit(n, '')) == ' ')
if(num_space == 1){
last <- gsub('(.+) .+', '\\1', n)
first <- gsub('.+ (.+)', '\\1', n)
middle <- ''
} else if(num_space == 2){
last <- gsub('(.+) .+ .+', '\\1', n)
first <- gsub('.+ (.+) .+', '\\1', n)
middle <- gsub('.+ .+ (.+)', '\\1', n)
} else if(num_space == 3){
last <- gsub('(.+ .+) .+ .+', '\\1', n)
first <- gsub('.+ .+ (.+) .+', '\\1', n)
middle <- gsub('.+ .+ .+ (.+)', '\\1', n)
} else if(num_space == 4){
last <- gsub('(.+ .+ .+) .+ .+', '\\1', n)
first <- gsub('.+ .+ .+ (.+) .+', '\\1', n)
middle <- gsub('.+ .+ .+ .+ (.+)', '\\1', n)
} else{
last <- first <- middle <- NA
}
return(data.table(first, middle, last))
}
out <- lapply(df$NAME, parse_name)
final <- rbindlist(out)
df <- cbind(df, final)
df <- df[, c('first','middle','last','Email')]
df$rank <- 'CDT'
colnames(df)[4] <- 'email'
#make sure everyone is in the database
p <- data.table(get_people())
p[first == df[i, first] & middle == df[i, middle] & last == df[i, last] & email == df[i, email]]
for(i in 1:nrow(df)){
if(nrow(p[first == df[i, first] & middle == df[i, middle] & last == df[i, last] & email == df[i, email]]) == 0){
p_df <- df[i]
add_people(p_df)
print(p_df)
}
}
df <- fread('~/Downloads/cft_roster_0722.csv')
out <- lapply(df$NAME, parse_name)
final <- rbindlist(out)
df <- cbind(df, final)
df[, squadID := paste0(SUMCO, SUMPLT, SUMSQD)]
df <- df[, c('first','middle','last','Email', 'squadID')]
df$rank <- 'CDT'
colnames(df)[4] <- 'email'
View(df)
table(df$squadID)
u_squad <- unique(df$squadID)
u_squad
i <- 1
sub <- df[squadID == u_squad[i]]
sub
ids <- as.numeric(sub[, db_id])
df$db_id <- ''
for(i in 1:nrow(df)){
df[i, 'db_id'] <- p[first == df[i, first] & middle == df[i, middle] & last == df[i, last] & email == df[i, email], id]
}
i <- 1
df$db_id <- ''
p[first == df[i, first] & middle == df[i, middle] & last == df[i, last] & email == df[i, email], id]
df[i, first]
middle == df[i, middle]
df[i, middle]
df[i, last]
df[i, email]
p <- data.table(get_people())
df$db_id <- ''
for(i in 1:nrow(df)){
df[i, 'db_id'] <- p[first == df[i, first] & middle == df[i, middle] & last == df[i, last] & email == df[i, email], id]
}
View(df)
u_squad <- unique(df$squadID)
i <- 1
sub <- df[squadID == u_squad[i]]
ids <- as.numeric(sub[, db_id])
ids
name <- paste0('CFT Initial Peer Ratings: ', u_squad[i])
name
#make sure you can load these, if not do install.packages('data.table') substituting the names of the other libraries you need
library(data.table)
library(httr)
library(jsonlite)
#-toggle cft/cldt by commenting one of them out
group <- 'CFT'
#---get results from DB
token <- '281ddaccf4f2d13593f26480a7a55f390dfb0fc0'
url_base <- 'https://appdseelo.azurewebsites.net/'
get_experiments <- function(){
url <- paste0(url_base, 'api/v1/exp_external/')
full_token <- paste0('Token ', token)
res <- GET(url, add_headers(Authorization = full_token))
if(res$status_code == 200){
results <- fromJSON(content(res, 'text', encoding = 'latin1'))
return(results)
} else{
stop(paste0('in API call. Status code: ', res$status_code))
}
}
get_results <- function(exp_id){
url <- paste0(url_base, '/api/v1/res_external/?exp_id=', exp_id)
full_token <- paste0('Token ', token)
res <- GET(url, add_headers(Authorization = full_token))
if(res$status_code == 200){
results <- fromJSON(content(res, 'text', encoding = 'latin1'))
return(results)
} else{
stop(paste0('in API call. Status code: ', res$status_code))
}
}
exp <- get_experiments()
exp <- data.table(exp)
exps <- exp[grep(group, exp$title)]
rater_cols <- c('rater.id', 'rater.first', 'rater.middle', 'rater.last', 'rater.email', 'uuid')
out <- list()
pb <- txtProgressBar(max = nrow(exps), style = 3)
for(i in 1:nrow(exps)){
ex_id <- exps[i, id]
r <- data.table(get_results(ex_id))
all <- r[, rater_cols, with = FALSE]
all <- unique(all)
all$complete <- ''
for(j in 1:nrow(all)){
s <- r[rater.id == all$rater.id[j]]
if(TRUE %in% is.na(s$end)){
all[j, 'complete'] <- 'no'
}else{
all[j, 'complete'] <- 'yes'
}
}
all[, squadID := gsub(paste0(group, ' Initial Peer Ratings: (.*)'), '\\1', exps$title[i])]
out[[i]] <- all
setTxtProgressBar(pb, i)
}
report <- rbindlist(out)
print(paste0(100 * round(sum(report$complete == 'yes') / nrow(report), 4), '% complete'))
fwrite(report, paste0(group, '_report.csv'))
reticulate::repl_python()
#---improved munge script for covid data
suppressWarnings({
suppressMessages({
library(data.table)
library(RSQLite)
library(DBI)
library(dplyr)
library(dbplyr)
library(mixdist)
library(extraDistr)
library(jsonlite)
library(geojsonio)
library(sp)
})
})
setwd('~/working/cov_api/')
#functions used
rt.func.v2<-function(dat,mean.Weibull=4.8,sd.Weibull=2.3){
r.vals<-numeric(length = (length(dat) - 2))
#get the Weibull parameters from mixdist's weibullpar function
mGT.params<-weibullpar(mean.Weibull, sd.Weibull, loc = 0)
alpha<-mGT.params[2] # called shape in weibullpar, alpha in a discrete Weilbull
beta<-mGT.params[1] # called scale in weibullpar, beta in a discrete Weibull
#the extraDistr package uses an altrnative parameterization of the Weibull (q, beta) from
#Nakagawa and Osaki (1975) where q = exp(-alpha^-beta), so...
q<-exp(-as.numeric(alpha)^(-as.numeric(beta)))
#Discretize Weibull via the extraDistr package's ddweibull function
w<- ddweibull(0:1000, as.numeric(q), as.numeric(beta), log = FALSE)
growth<-diff(dat)
growth<-pmax(growth, 0) # eliminate any erroneous downward shifts in the cumulative counts
#Estimate R(t) from equation (33) of Nishiura and Chowell (2009)
for(k in 2:length(growth)){
r.vals[k-1]<-growth[k]/(sum(growth[1:k]*rev(w[1:k])))
}
#Output the results
return(c(NA, NA, r.vals))
}
covid_db <- dbConnect(RSQLite::SQLite(), 'data/covid_db.sqlite')
#---check if need to update
suppressWarnings({
suppressMessages({
x <- tbl(covid_db, 'counties') %>%
filter(date == max(date, na.rm = TRUE)) %>%
select(date) %>%
collect()
})
})
db_date <- as.Date(x[1][[1]][1])
main <- fread('https://usafactsstatic.blob.core.windows.net/public/data/covid-19/covid_confirmed_usafacts.csv', colClasses = 'character', showProgress = FALSE)
main <- main[countyFIPS != '0']
keep_cols <- grep('V',colnames(main), invert = TRUE)
main <- main[, keep_cols, with=FALSE]
facts_date <- as.Date(colnames(main)[length(colnames(main))], format = '%m/%d/%y')
#---finish cleaning up the usafacts data
main[nchar(countyFIPS) == 4, 'countyFIPS'] <- paste0('0', main[nchar(countyFIPS) == 4, countyFIPS])
df <- melt.data.table(main, id.vars = 1:4, measure.vars = 5:ncol(main), variable.name = 'date', value.name = 'case_count')
df[, date := as.Date(as.character(date), format = '%m/%d/%y')][
, case_count := as.integer(gsub(',', '', case_count))
]
#add daily growth
df[, delta := lapply(.SD, function(d) d - shift(d)), by = countyFIPS, .SDcols = 'case_count']
#add percent increase
df[, per_delta := lapply(.SD, function(d) (d - shift(d))/shift(d)), by = countyFIPS, .SDcols = 'case_count']
df[is.nan(per_delta), 'per_delta'] <- NA
df[is.infinite(per_delta), 'per_delta'] <- NA
#add rt
df[, r_t := rt.func.v2(case_count), by = 'countyFIPS']
#brind in deaths
deaths <- fread('https://usafactsstatic.blob.core.windows.net/public/data/covid-19/covid_deaths_usafacts.csv',
colClasses = 'character', showProgress = FALSE)
#drop bad data
d <- deaths[duplicated(deaths) == FALSE]
d <- d[countyFIPS != '0']
keep_cols <- grep('V',colnames(d), invert = TRUE)
d <- d[, keep_cols, with=FALSE]
#fix fips codes with leading 0
d[nchar(countyFIPS) == 4, 'countyFIPS'] <- paste0('0', d[nchar(countyFIPS) == 4, countyFIPS])
d <- melt.data.table(d, id.vars = 1:4, measure.vars = 5:ncol(d), variable.name = 'date', value.name = 'deaths')
d[, date := as.Date(as.character(date), format = '%m/%d/%y')][
, deaths := as.integer(gsub(',', '', deaths))
]
d <- d[, c('countyFIPS', 'date', 'deaths')]
setkeyv(d, c('countyFIPS', 'date'))
setkeyv(df, c('countyFIPS', 'date'))
#merge deaths
df <- d[df]
#--add pops
pop <- fread('https://www2.census.gov/programs-surveys/popest/datasets/2010-2019/counties/totals/co-est2019-alldata.csv',
colClasses = 'character', showProgress = FALSE)
pop[, countyFIPS := paste0(STATE, COUNTY)]
pop <- pop[, c('countyFIPS', 'POPESTIMATE2019')]
pop[, pop := as.numeric(POPESTIMATE2019)]
pop <- pop[, c('countyFIPS', 'pop')]
setkey(pop, countyFIPS)
setkey(df, countyFIPS)
df <- pop[df]
#---per capita cases and deaths
#df[, cases_per_10k := (case_count / pop) * 10000]
#df[, deaths_per_10k := (deaths / pop) * 10000]
#---age pop
age_pop <- fread('https://www2.census.gov/programs-surveys/popest/datasets/2010-2019/counties/asrh/cc-est2019-alldata.csv',
colClasses = 'character', showProgress = FALSE)
age_pop <- age_pop[YEAR == '12']
age_pop[, countyFIPS := paste0(STATE, COUNTY)]
age_pop[, AGEGRP := as.numeric(AGEGRP)]
#probability of hospitalization
#source: https://www.thelancet.com/action/showPdf?pii=S1473-3099%2820%2930243-7
hosp_table <- data.table(age = c('0-9','10-19','20-29','30-39','40-49','50-59','60-69','70-79','80+'),
rate = c(0, .000408, .0104, .0343, .0425, .0816, .118, .166, .184))
#---assumptions
#time from symptoms to test result
t1 <- 2
#time from symptoms to hospitalization
#source: https://jamanetwork.com/journals/jama/fullarticle/2761044
t2 <- 7
#max time infectious
m_i <- 10
#under-reporting
under <- 10
final <- list()
u_id <- unique(df$countyFIPS)
pb <- txtProgressBar(max = length(u_id), style = 3)
for(j in 1:length(u_id)){
ages <- age_pop[countyFIPS == u_id[j]]
age_dist <- c(sum(as.numeric(ages[AGEGRP %in% c(1,2), TOT_POP])), sum(as.numeric(ages[AGEGRP %in% c(3,4), TOT_POP])), sum(as.numeric(ages[AGEGRP %in% c(5,6), TOT_POP])),
sum(as.numeric(ages[AGEGRP %in% c(7,8), TOT_POP])), sum(as.numeric(ages[AGEGRP %in% c(9,10), TOT_POP])), sum(as.numeric(ages[AGEGRP %in% c(11,12), TOT_POP])),
sum(as.numeric(ages[AGEGRP %in% c(13,14), TOT_POP])), sum(as.numeric(ages[AGEGRP %in% c(15,16), TOT_POP])), sum(as.numeric(ages[AGEGRP %in% c(17,18), TOT_POP])))
age_prop <- age_dist / sum(age_dist)
p_h <- mean(age_prop * hosp_table$rate)
sub <- df[countyFIPS == u_id[j]]
#dates <- (min(sub$date) + 12):max(sub$date)
dates <- min(sub$date):max(sub$date)
out <- list()
for(i in 1:length(dates)){
#get days where people might already be hospitalized
hosp <- sub[date >= dates[i] - (m_i - t1) & date <= dates[i] - (t2 - t1)]
num_early <- round(sum(hosp$delta) * (1-p_h))
#get days where people won't be hospitalized yet
tmp <- sub[date > dates[i] - (t2 - t1) & date <= dates[i]]
num_late <- sum(tmp$delta)
walking <- (num_early + num_late) * under
walking_per_cap <- walking / sub$pop[1]
out[[i]] <- walking_per_cap * 100
}
probs <- unlist(out)
probs[1:12] <- NA
sub[, infect_prob := probs]
final[[j]] <- sub
setTxtProgressBar(pb, j)
}
df <- rbindlist(final)
df <- df[order(date)]
#---moving averages
df <- df[order(countyFIPS, date)]
df <- df[, r_t_three := frollmean(r_t, n = 3), by = countyFIPS]
df <- df[, r_t_seven := frollmean(r_t, n = 7), by = countyFIPS]
final <- list()
u_id <- unique(df$countyFIPS)
pb <- txtProgressBar(max = length(u_id), style = 3)
for(j in 1:length(u_id)){
sub <- df[countyFIPS == u_id[j]]
sub <- sub[order(-date)]
out <- list()
for(i in 1:length(sub$case_count)){
half <- sub$case_count[i]/2
index <- which(sub$case_count < half)[1]
out[[i]] <- as.numeric(sub$date[index] - sub$date[i]) * -1
}
sub[, doubling := unlist(out)]
final[[j]] <- sub
setTxtProgressBar(pb, j)
}
df <- rbindlist(final)
df <- df[order(date)]
df[, date := as.character(date)]
dbWriteTable(covid_db, 'counties', df, overwrite = TRUE)
print(paste0('Successful update at: ', Sys.time()))
update_history <- read.csv('~/working/cov_api/update_history.csv', stringsAsFactors = FALSE)
update_history <- rbind(update_history, data.frame(date = as.character(Sys.time())))
write.csv(update_history, '~/working/cov_api/update_history.csv', row.names = FALSE)
source('~/working/bigmap_api/create_files.R')
